reader=ru.spbstu.pipeline.implementation.ConfiguredReader; test_run/reader.properties
writer=ru.spbstu.pipeline.implementation.BasicWriter; test_run/writer.properties
executors=\
  ru.spbstu.coda.coders.rle.RLEEncoderExecutor; abc.xyz>\
  ru.spbstu.pipeline.implementation.BasicExecutor; test_run/executor1.properties>\
  DamaskinskiyLZWExecutor; test_run/konstantin/compress.cfg>\
  ru.spbstu.pipeline.implementation.BasicExecutor; test_run/executor1.properties>\
  DamaskinskiyLZWExecutor; test_run/konstantin/decompress.cfg>\
  ru.spbstu.pipeline.implementation.BasicExecutor; test_run/executor3.properties>\
  ru.spbstu.coda.coders.rle.RLEDecoderExecutor; abc.xyz>\
  ru.spbstu.pipeline.implementation.converter.ConverterWrapper; test_run/executor2.properties>\
  ru.spbstu.pipeline.implementation.BasicExecutor; test_run/executor3.properties

comment=\
  Important: \
1. DamaskinskyLZWExecutor can't go first before or after Andrei's RLEEncoderExecutor or RLEDecoderExecutor: \
first uses only char[], second only byte[]\
2. Don't use Andrei's DecoratedRLEENcoderExecutor or DecoratedRLEDecoderExecutor before any of Valera's executors: \
decorated do not support multi-threading and thus incompatible with Valera's executors and BasicWriter \
3. Constantin's DamaskinskyLZWExecutor accepts inputs only in specific alphabet. Do not place Valera's \
converter before it because converter result contains special chars
